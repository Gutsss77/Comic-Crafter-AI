import streamlit as st
from prompts import *
import ast
import re
import json

# Steamlit app interface
st.title("Comic Generator App")
st.write("This app generates comic book plots based on the title you provide.")

# Get user input
# input_text = st.text_input("Enter the title of your comic book:")
input_text = "The Dark Knight"


###############################
# Cleaning data
def clean_data(data):
    start_python = data.find("```python")
    start_json = data.find("```json")
    end = data.rfind("```")
    if start_json == -1:
        try:
            cleaned_data= data.strip("```python").strip("```").strip()
            return cleaned_data
        except Exception as e:
            st.error(f"An error occurred. Please try again.\n{e}")
    elif start_python == -1:
        try:
            cleaned_data= data.strip("```json").strip("```").strip()
            return cleaned_data
        except Exception as e:
            st.error(f"An error occurred. Please try again.\n{e}")
    else:
        return None

#

# button functions
def generate_theme():
    theme_output = theme_seq_chain.invoke({'title': input_text})
    # st.write(theme_output)
    response = theme_output['theme_data']  # this response is a string
    try:
        clean_response = clean_data(response)
        python_dic = ast.literal_eval(clean_response)
        return python_dic
    except Exception as e:
        st.error(f"An error occurred. Please try again.\n{e}")
    return {}

#

def generate_plot():
    pass

#-----------------------------------Comic Data------------------------

def collect_theme_data(theme_data):
    title = theme_data.get('title', '')
    genre = theme_data.get('genre', '')
    tone = theme_data.get('tone', '')
    themes = theme_data.get('themes', [])
    keywords = theme_data.get('keywords', [])
    setting = theme_data.get('setting', {})
    location = setting.get('location', '')
    time_period = setting.get('time_period', '')
    atmosphere = setting.get('atmosphere', '')

#

def show_theme_data(theme_data):
    st.markdown("## Theme Data")

    # Iterate the dictionary and its items
    for key, value in theme_data.items():

        # Check if the value is Themes and Keywords as they are list
        if key == 'themes' or key == 'keywords':
            st.markdown(f"- **{key.capitalize()}:**")

            # Iterate the list and its items
            for items in theme_data.get(key):
                # Displaying the items
                st.markdown(f"&emsp; ➡️ :orange[*{items}*]")

        # Check if the value is Setting as it is dictionary
        elif key == 'setting':
            st.markdown(f"- **{key.capitalize()}:**")

            # Iterate the dictionary and its items
            for sub_key, sub_value in theme_data.get(key).items():
                # Displaying the items
                st.markdown(f"&emsp; ➡️ :green[*__{sub_key.capitalize()}:__*] &nbsp; :orange[*{sub_value}*]")
        
        # Displaying the other items
        else:
            st.markdown(f"- **{key.capitalize()}:** &nbsp; :orange[*{value}*]")

#

#---    

# Generate comic plot
if st.button("Generate Comic Plot"):
    # collect the theme data(collect_theme_data()) that is generated by the theme generator(generate_theme())
    try:
        collect_theme_data(generate_theme())
        # Show the theme data
        show_theme_data(generate_theme())

    except Exception as e:
        st.error(f"An error occurred. Please try again.\n{e}")

